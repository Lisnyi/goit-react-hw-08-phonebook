{"version":3,"file":"static/js/5.50b574c2.chunk.js","mappings":"+QASe,SAASA,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAChCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IACjCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAQpCG,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KACDG,QAAQ,+HAAwF,sFAChGC,WACLC,MAAOL,EAAAA,KACFK,QACAD,WACLE,SAAUN,EAAAA,KACLO,IAAI,EAAG,+CACPH,aAeT,OACI,SAAC,KAAD,CAAQI,cA/BS,CACjBN,KAAM,GACNG,MAAO,GACPC,SAAU,IA4B2BG,iBAAkBV,EAAQW,SAb9C,SAAC,EAAD,GAA2C,IAAzCR,EAAwC,EAAxCA,KAAMG,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAYK,EAAe,EAAfA,UAEtCC,EAAU,CAChBV,KAAAA,EACAG,MAAAA,EACAC,SAAAA,GAEAd,GAASqB,EAAAA,EAAAA,IAAOD,IACfE,SACAC,MAAK,kBAAOJ,GAAP,GACT,EAG0FK,gBAAgB,EAAvG,SACS,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,OACG,UAAC,KAAD,CAAgBC,aAAa,MAA7B,WACI,SAAC,KAAD,CAAOC,QAAS1B,EAAhB,mBACA,SAAC,KAAD,CACI2B,KAAK,OACLnB,KAAK,OACLoB,GAAI5B,EACJ6B,YAAa,eACbC,MAAOP,EAAOf,KAAO,EAAI,EACzBgB,QAASA,EAAQhB,KAAO,EAAI,KAEhC,SAAC,KAAD,CAAOA,KAAK,OAAOuB,UAAU,UAC7B,SAAC,KAAD,CAAOL,QAASvB,EAAhB,oBACA,SAAC,KAAD,CACIwB,KAAK,QACLnB,KAAK,QACLoB,GAAIzB,EACJ0B,YAAY,kBACZC,MAAOP,EAAOZ,MAAQ,EAAI,EAC1Ba,QAASA,EAAQb,MAAQ,EAAI,KAEjC,SAAC,KAAD,CAAOH,KAAK,QAAQuB,UAAU,UAC9B,SAAC,KAAD,CAAOL,QAAStB,EAAhB,uBACA,SAAC,KAAD,CACIuB,KAAK,WACLnB,KAAK,WACLoB,GAAIxB,EACJyB,YAAY,UACZC,MAAOP,EAAOX,SAAW,EAAI,EAC7BY,QAASA,EAAQZ,SAAW,EAAI,KAEpC,SAAC,KAAD,CAAOJ,KAAK,WAAWuB,UAAU,UACjC,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYN,KAAK,SAAjC,wBAhCP,GAqChB,C,cCnFc,SAASO,IAEtB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,6BACA,SAACrC,EAAD,UAKT,C,yKCZYsC,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mNAWdE,EAAQF,EAAAA,GAAAA,MAAH,kGAMLG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,8PACG,SAAAK,GAAK,OAAIC,QAAQD,EAAMX,QAAUY,QAAQD,EAAMjB,SAAW,EAAI,EAAzD,IAabmB,GAAQP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,uF","sources":["components/App/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","shared/styles/Form.styled.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { Formik } from 'formik';\nimport { useDispatch } from \"react-redux\";\nimport * as yup from 'yup';\nimport { useMemo } from \"react\";\nimport Button from '@mui/material/Button';\nimport { signup } from \"redux/auth/auth-operations\";\nimport { NewContactForm, Input, Label, Error } from \"shared/styles/Form.styled\";\n\nexport default function RegisterForm() {\n\n    const dispatch = useDispatch()\n\n    const nameId = useMemo(()=> nanoid(), []);\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(()=> nanoid(), []);\n\n    const initialState = {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n    }\n\n    const schema = yup.object().shape({\n        name: yup.string()\n            .matches(/([A-Z]{1}[a-z]{1,14} [A-Z]{1}[a-z]{1,14})|([А-Я]{1}[а-я]{1,14} [А-Я]{1}[а-я]{1,14})/g, \"Name must contain two words starting with capital letters and separated by a space\")\n            .required(),\n        email: yup.string()\n            .email()\n            .required(),\n        password: yup.string()\n            .min(7, \"Password must contain at least 7 characters\")\n            .required()\n    });\n\n    const handleSubmit = ({name, email, password}, {resetForm}) => {\n\n        const newUser = {\n        name,\n        email,\n        password\n        }\n        dispatch(signup(newUser))\n        .unwrap()\n        .then(() =>  resetForm())\n    }\n \n    return (\n        <Formik initialValues={initialState} validationSchema={schema} onSubmit={handleSubmit} validateOnBlur={false}>\n                {({errors, touched}) => (\n                    <NewContactForm autoComplete='off'>\n                        <Label htmlFor={nameId}>Name</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"name\"\n                            id={nameId}\n                            placeholder= \"Adrian Cross\"\n                            error={errors.name ? 1 : 0}\n                            touched={touched.name ? 1 : 0}\n                        />\n                        <Error name=\"name\" component=\"span\"/>\n                        <Label htmlFor={emailId}>Email</Label>\n                        <Input\n                            type=\"email\"\n                            name=\"email\"\n                            id={emailId}\n                            placeholder=\"across@mail.com\"\n                            error={errors.email ? 1 : 0}\n                            touched={touched.email ? 1 : 0}\n                        />\n                        <Error name=\"email\" component=\"span\"/>\n                        <Label htmlFor={passwordId}>Password</Label>\n                        <Input\n                            type=\"password\"\n                            name=\"password\"\n                            id={passwordId}\n                            placeholder=\"*******\"\n                            error={errors.password ? 1 : 0}\n                            touched={touched.password ? 1 : 0}\n                        />\n                        <Error name=\"password\" component=\"span\"/>\n                        <Button variant=\"contained\" type='submit'>Register</Button>\n                    </NewContactForm>\n                )}\n            </Formik>\n    )\n}","import RegisterForm from \"components/App/RegisterForm/RegisterForm\"\nimport { MainTitle, Main, Conteiner, Section } from \"components/App/App.styled\"\n\nexport default function Register() {\n\n  return (\n    <Main>\n      <Section>\n        <Conteiner>\n          <MainTitle>Register page</MainTitle>\n          <RegisterForm/>\n        </Conteiner>\n      </Section>\n    </Main>\n  )\n}","import styled from \"styled-components\";\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const NewContactForm = styled(Form)`\n    display: flex;\n    margin: auto;\n    flex-direction: column;\n    width: 100%;\n    max-width: 500px;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #e3e2e1;\n`\n\nexport const Label = styled.label`\n    font-weight: bold;\n    margin-bottom: 8px;\n    width: fit-content;\n`\n\nexport const Input = styled(Field)`\n    margin-bottom: ${props => Boolean(props.error) && Boolean(props.touched) ? 4 : 25}px;\n    padding: 3px;\n    padding-left: 10px;\n    width: 100% - 10px;\n    border: none;\n    outline: 1px solid blue;\n    border-radius: 3px;\n\n    &:focus {\n        outline: 1px solid orange;\n    }\n`\n\nexport const Error = styled(ErrorMessage)`\n    font-size: 12px;\n    color: red;\n    margin-bottom: 8px;\n`"],"names":["RegisterForm","dispatch","useDispatch","nameId","useMemo","nanoid","emailId","passwordId","schema","yup","shape","name","matches","required","email","password","min","initialValues","validationSchema","onSubmit","resetForm","newUser","signup","unwrap","then","validateOnBlur","errors","touched","autoComplete","htmlFor","type","id","placeholder","error","component","Button","variant","Register","NewContactForm","styled","Form","Label","Input","Field","props","Boolean","Error","ErrorMessage"],"sourceRoot":""}