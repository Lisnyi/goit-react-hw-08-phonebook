{"version":3,"file":"static/js/323.029193e6.chunk.js","mappings":"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","sources":["components/App/ContactsForm/ContactsForm.jsx","redux/filter/filter-selectors.js","components/App/Phonebook/ContactList/ContactsList.styled.js","components/App/Phonebook/ContactList/ContactsItem/ContactsItem.jsx","components/App/Phonebook/ContactList/ContactsList.jsx","components/App/Phonebook/Filter/Filter.styled.js","components/App/Phonebook/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx","shared/styles/Form.styled.js"],"sourcesContent":["import { nanoid } from 'nanoid'\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types'\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport * as yup from 'yup';\nimport Button from '@mui/material/Button';\nimport { useAddContactMutation } from 'redux/contacts/contacts-api';\nimport { NewContactForm, Input, Label, Error } from \"shared/styles/Form.styled\";\n\nexport const ContactsForm = ({contacts}) => {\n    const [addContact, {isLoading}] = useAddContactMutation()\n\n    const initialValues = {\n        name: '',\n        number: ''\n    }\n\n    function isDuplicate (name, contactsList) {\n        const normalizedName = name.toLocaleLowerCase()\n        const result = contactsList.find((contact) => contact.name.toLocaleLowerCase() === normalizedName)\n        return result\n    }\n\n    const schema = yup.object().shape({\n        name: yup.string()\n            .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\")\n            .required(),\n        number: yup.string()\n            .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\")\n            .required()\n    });\n\n    const nameId = nanoid()\n    const numberId = nanoid()\n\n    const handleSubmit = ({name, number}, {resetForm}) => {\n        const newContact = {\n        name,\n        number\n        }\n\n        if (isDuplicate(name, contacts)) {\n            return Notify.warning(`${name} is already in contacts`)\n        }\n        addContact(newContact)\n        .unwrap()\n        .then(({name}) => Notify.success(`${name} successfully added`))\n        .catch(({error}) => Notify.failure(error))\n        resetForm()\n    }\n    \n    return  <Formik initialValues={initialValues} validationSchema={schema} onSubmit={handleSubmit} validateOnBlur={false}>\n                {({errors, touched}) => (\n                    <NewContactForm autoComplete='off'>\n                    <Label htmlFor={nameId}>Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"name\"\n                        id={nameId}\n                        placeholder=\"Name\"\n                        error={errors.name ? 1 : 0}\n                        touched={touched.name ? 1 : 0}\n                    />\n                    <Error name=\"name\" component=\"span\"/>\n                    <Label htmlFor={numberId}>Number</Label>\n                    <Input\n                        type=\"tel\"\n                        name=\"number\"\n                        id={numberId}\n                        placeholder=\"+380-546\"\n                        error={errors.number ? 1 : 0}\n                        touched={touched.number ? 1 : 0}\n                    />\n                    <Error name=\"number\" component=\"span\"/>\n                    <Button variant=\"contained\" type='submit' disabled={isLoading}>{isLoading ? 'Adding...' : 'Add new contact'}</Button>\n                </NewContactForm>\n                )}\n            </Formik>\n    }\n\n    ContactsForm.propTypes = {\n        contacts: PropTypes.arrayOf(PropTypes.object)\n      }","export const getFilter = store => store.filter","import styled from \"styled-components\";\n\nexport const ContactRegister = styled.ul`\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`\n\nexport const ContactElement =  styled.li`\n    margin-bottom: 16px;\n    display: flex;\n    align-items: center;\n\n    &:last-child {\n        margin-bottom: 0;\n    }\n\n    button {\n        margin-left: 10px;\n        height: 30px;\n    }\n`\n\nexport const ContactContainer = styled.div`\n    min-width: 413px;\n`\n\nexport const ContactName = styled.p`\n    margin: 0;\n    padding: 3px;\n    background-color: #e3e2e1;\n`\n\nexport const ContactNumber = styled.p`\n    margin: 0;\n    padding: 3px;\n`","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport PropTypes from 'prop-types';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { ContactElement, ContactName, ContactNumber, ContactContainer } from \"../ContactsList.styled\"\nimport { useRemoveContactMutation } from \"redux/contacts/contacts-api\"\n\nexport const ContactItem = ({id, number, name}) => {\n    const [removeContact, {isLoading}] = useRemoveContactMutation()\n    \n    const deleteContact = (id, name) => {\n        removeContact(id)\n        .unwrap()\n        .then(() => Notify.success(`${name} successfully deleted`))\n        .catch(({error}) => Notify.failure(error))\n    }\n\n    return  <ContactElement key={id}>\n                <ContactContainer>\n                    <ContactName><b>Name</b>: {name}</ContactName>\n                    <ContactNumber><b>Number</b>: {number}</ContactNumber>\n                </ContactContainer>\n                <LoadingButton\n                    size=\"small\"\n                    variant=\"contained\"\n                    onClick={() => deleteContact(id, name)}\n                    disabled={isLoading}\n                    loading={isLoading}\n                    >{isLoading ? \"Deleting\" : \"Delete\"}</LoadingButton>\n            </ContactElement>\n}\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n}","import PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\nimport { getFilter } from 'redux/filter'\nimport { ContactItem } from './ContactsItem/ContactsItem'\nimport { ContactRegister } from './ContactsList.styled'\n\nexport const ContactsList = ({contacts}) => {\n    const filter = useSelector(getFilter)\n\n    const getSortedContacts = data => {\n      const list = [...data]\n      const sortedList = list.sort((a, b) => a.name.localeCompare(b.name));\n  \n      return sortedList\n    }\n  \n    const getFilteredContacts = data => {\n      if (!filter) {\n          return data\n      }\n  \n      const normalizedFilter = filter.toLocaleLowerCase()\n      const filteredContacts = data.filter(({name}) => {\n          const normalizedName = name.toLocaleLowerCase()\n          const result = normalizedName.includes(normalizedFilter)\n          return result;\n      })\n  \n      return filteredContacts;\n    }\n  \n    const sortedList = getSortedContacts(contacts)\n    const contactsList = getFilteredContacts(sortedList)\n    \n    return  <ContactRegister>\n                {contactsList.map(({id, name, number}) =>(\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}/>))}\n            </ContactRegister>\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object)\n}","import styled from \"styled-components\";\n\nexport const FilterCounteiner = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n`\n\nexport const FilterLabel = styled.label`\n    width: fit-content;\n    margin-bottom: 8px;\n`\n\nexport const FilterInput = styled.input`\n    max-width: 400px;\n    padding: 3px;\n    padding-left: 10px;\n    border: none;\n    outline: 1px solid blue;\n    border-radius: 3px;\n\n\n    &:focus {\n        outline: 1px solid orange;\n    }\n`","import { nanoid } from \"nanoid\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { getFilter, setFilter } from \"redux/filter\"\nimport { FilterCounteiner, FilterLabel, FilterInput } from \"./Filter.styled\"\n\nexport const Filter = () => {\n\n    const filter = useSelector(getFilter)\n    const dispatch = useDispatch()\n\n    const filterId = nanoid()\n\n    function handleChange ({currentTarget}) {\n        dispatch(setFilter(currentTarget.value))\n    }\n\n    return  <FilterCounteiner>\n                <FilterLabel htmlFor={filterId}>Find contacts by name:</FilterLabel>\n                <FilterInput autoComplete=\"off\" type=\"text\" name=\"filter\" placeholder=\"Filter\" value={filter} id={filterId} onChange={handleChange}/>\n            </FilterCounteiner>\n}","import { useGetContactsQuery } from 'redux/contacts/contacts-api';\nimport { ContactsForm, ContactsList, Filter } from '../../components'\nimport { Main, MainTitle, SectionTitle, Conteiner, Section } from 'components/App/App.styled';\nimport { ThreeDots } from  'react-loader-spinner'\n\nexport default function ContactsPage () {\n  const {data: contacts, isLoading} = useGetContactsQuery()\n\n  return (\n    <Main>\n      <Section>\n        <Conteiner>\n          <MainTitle>Phonebook</MainTitle>\n          <ContactsForm contacts={contacts}/>\n        </Conteiner>\n      </Section>\n      <Section>\n        <Conteiner>\n          <SectionTitle>Contacts</SectionTitle>\n          <Filter/>\n          {contacts?.length\n            ? <ContactsList contacts={contacts}/>\n            : null}\n          {isLoading && <ThreeDots \n                                height=\"50\" \n                                width=\"50\" \n                                radius=\"9\"\n                                color=\"#2714d3\" \n                                ariaLabel=\"three-dots-loading\"\n                                visible={true}\n                                />}\n        </Conteiner>\n      </Section>\n    </Main>\n  )\n}\n","import styled from \"styled-components\";\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const NewContactForm = styled(Form)`\n    display: flex;\n    margin: auto;\n    flex-direction: column;\n    width: 100%;\n    max-width: 500px;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #e3e2e1;\n`\n\nexport const Label = styled.label`\n    font-weight: bold;\n    margin-bottom: 8px;\n    width: fit-content;\n`\n\nexport const Input = styled(Field)`\n    margin-bottom: ${props => Boolean(props.error) && Boolean(props.touched) ? 4 : 25}px;\n    padding: 3px;\n    padding-left: 10px;\n    width: 100% - 10px;\n    border: none;\n    outline: 1px solid blue;\n    border-radius: 3px;\n\n    &:focus {\n        outline: 1px solid orange;\n    }\n`\n\nexport const Error = styled(ErrorMessage)`\n    font-size: 12px;\n    color: red;\n    margin-bottom: 8px;\n`"],"names":["ContactsForm","contacts","useAddContactMutation","addContact","isLoading","schema","yup","shape","name","matches","required","number","nameId","nanoid","numberId","initialValues","validationSchema","onSubmit","resetForm","newContact","contactsList","normalizedName","toLocaleLowerCase","find","contact","isDuplicate","Notify","unwrap","then","catch","error","validateOnBlur","errors","touched","autoComplete","htmlFor","type","id","placeholder","component","Button","variant","disabled","getFilter","store","filter","ContactRegister","styled","ContactElement","ContactContainer","ContactName","ContactNumber","ContactItem","useRemoveContactMutation","removeContact","LoadingButton","size","onClick","deleteContact","loading","ContactsList","data","useSelector","normalizedFilter","includes","getFilteredContacts","sort","a","b","localeCompare","map","FilterCounteiner","FilterLabel","FilterInput","Filter","dispatch","useDispatch","filterId","value","onChange","currentTarget","setFilter","ContactsPage","useGetContactsQuery","length","height","width","radius","color","ariaLabel","visible","NewContactForm","Form","Label","Input","Field","props","Boolean","Error","ErrorMessage"],"sourceRoot":""}