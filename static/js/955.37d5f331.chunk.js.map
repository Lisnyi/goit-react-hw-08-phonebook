{"version":3,"file":"static/js/955.37d5f331.chunk.js","mappings":"iRASe,SAASA,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IACjCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAOpCE,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KACFE,QACAC,WACLC,SAAUJ,EAAAA,KACLK,IAAI,EAAG,+CACPF,aAcT,OACI,SAAC,KAAD,CAAQG,cA1BS,CACjBJ,MAAO,GACPE,SAAU,IAwB2BG,iBAAkBR,EAAQS,SAZ9C,SAAC,EAAD,GAAqC,IAAnCN,EAAkC,EAAlCA,MAAOE,EAA2B,EAA3BA,SAAYK,EAAe,EAAfA,UAChCC,EAAO,CACTR,MAAAA,EACAE,SAAAA,GAGJX,GAASkB,EAAAA,EAAAA,IAAMD,IACdE,SACAC,MAAK,kBAAOJ,GAAP,GACT,EAG0FK,gBAAgB,EAAvG,SACS,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,OACG,UAAC,KAAD,CAAgBC,aAAa,KAA7B,WACI,SAAC,KAAD,CAAOC,QAASvB,EAAhB,oBACA,SAAC,KAAD,CACIwB,KAAK,QACLC,KAAK,QACLC,GAAI1B,EACJ2B,YAAY,kBACZC,MAAOR,EAAOb,MAAQ,EAAI,EAC1Bc,QAASA,EAAQd,MAAQ,EAAI,KAEjC,SAAC,KAAD,CAAOkB,KAAK,QAAQI,UAAU,UAC9B,SAAC,KAAD,CAAON,QAASpB,EAAhB,uBACA,SAAC,KAAD,CACIqB,KAAK,WACLC,KAAK,WACLC,GAAIvB,EACJwB,YAAY,UACZC,MAAOR,EAAOX,SAAW,EAAI,EAC7BY,QAASA,EAAQZ,SAAW,EAAI,KAEpC,SAAC,KAAD,CAAOgB,KAAK,WAAWI,UAAU,UACjC,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYP,KAAK,SAAjC,qBAtBP,GA2BhB,C,cCnEc,SAASQ,IAEtB,OACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,0BACA,SAACnC,EAAD,UAKP,C,yKCZYoC,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mNAWdE,EAAQF,EAAAA,GAAAA,MAAH,kGAMLG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,8PACG,SAAAK,GAAK,OAAIC,QAAQD,EAAMX,QAAUY,QAAQD,EAAMlB,SAAW,EAAI,EAAzD,IAaboB,GAAQP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,uF","sources":["components/App/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","shared/styles/Form.styled.js"],"sourcesContent":["import { useMemo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { Formik } from 'formik';\nimport Button from '@mui/material/Button';\nimport * as yup from 'yup';\nimport { NewContactForm, Input, Label, Error } from \"shared/styles/Form.styled\";\nimport { login } from \"redux/auth/auth-operations\";\n\nexport default function LoginForm () {\n\n    const dispatch = useDispatch()\n\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(()=> nanoid(), []);\n\n    const initialState = {\n        email: \"\",\n        password: \"\",\n    }\n\n    const schema = yup.object().shape({\n        email: yup.string()\n            .email()\n            .required(),\n        password: yup.string()\n            .min(7, \"Password must contain at least 7 characters\")\n            .required()\n    });\n\n    const handleSubmit = ({email, password}, {resetForm}) => {\n        const user = {\n            email,\n            password\n        }\n        \n        dispatch(login(user))\n        .unwrap()\n        .then(() =>  resetForm())\n    }\n \n    return (\n        <Formik initialValues={initialState} validationSchema={schema} onSubmit={handleSubmit} validateOnBlur={false}>\n                {({errors, touched}) => (\n                    <NewContactForm autoComplete='on'>\n                        <Label htmlFor={emailId}>Email</Label>\n                        <Input\n                            type=\"email\"\n                            name=\"email\"\n                            id={emailId}\n                            placeholder=\"across@mail.com\"\n                            error={errors.email ? 1 : 0}\n                            touched={touched.email ? 1 : 0}\n                        />\n                        <Error name=\"email\" component=\"span\"/>\n                        <Label htmlFor={passwordId}>Password</Label>\n                        <Input\n                            type=\"password\"\n                            name=\"password\"\n                            id={passwordId}\n                            placeholder=\"*******\"\n                            error={errors.password ? 1 : 0}\n                            touched={touched.password ? 1 : 0}\n                        />\n                        <Error name=\"password\" component=\"span\"/>\n                        <Button variant=\"contained\" type='submit'>Login</Button>\n                    </NewContactForm>\n                )}\n            </Formik>\n    )\n}\n","import LoginForm from \"components/App/LoginForm/LoginForm\"\nimport { MainTitle, Main, Conteiner, Section } from \"components/App/App.styled\"\n\nexport default function Login() {\n\n  return (\n  <Main>\n    <Section>\n      <Conteiner>\n        <MainTitle>Login page</MainTitle>\n        <LoginForm/>\n      </Conteiner>\n    </Section>\n  </Main>\n  )\n}\n","import styled from \"styled-components\";\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const NewContactForm = styled(Form)`\n    display: flex;\n    margin: auto;\n    flex-direction: column;\n    width: 100%;\n    max-width: 500px;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #e3e2e1;\n`\n\nexport const Label = styled.label`\n    font-weight: bold;\n    margin-bottom: 8px;\n    width: fit-content;\n`\n\nexport const Input = styled(Field)`\n    margin-bottom: ${props => Boolean(props.error) && Boolean(props.touched) ? 4 : 25}px;\n    padding: 3px;\n    padding-left: 10px;\n    width: 100% - 10px;\n    border: none;\n    outline: 1px solid blue;\n    border-radius: 3px;\n\n    &:focus {\n        outline: 1px solid orange;\n    }\n`\n\nexport const Error = styled(ErrorMessage)`\n    font-size: 12px;\n    color: red;\n    margin-bottom: 8px;\n`"],"names":["LoginForm","dispatch","useDispatch","emailId","useMemo","nanoid","passwordId","schema","yup","shape","email","required","password","min","initialValues","validationSchema","onSubmit","resetForm","user","login","unwrap","then","validateOnBlur","errors","touched","autoComplete","htmlFor","type","name","id","placeholder","error","component","Button","variant","Login","NewContactForm","styled","Form","Label","Input","Field","props","Boolean","Error","ErrorMessage"],"sourceRoot":""}